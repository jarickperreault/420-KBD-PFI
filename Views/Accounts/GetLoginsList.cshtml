@model IEnumerable<PhotosManager.Models.Login>
@{

    var loggedUsersId = (List<int>)ViewBag.LoggedUsersId;
    int count = Model.Count();
    List<PhotosManager.Models.Login> logins = Model.ToList();
    int index = 0;
    bool first = true;
    while (index < count)
    {
        var login = logins[index];
        var shiftedLoginDate = login.LoginDate.AddHours((int)Session["TimeZoneOffset"]);
        var shiftedLogoutDate = login.LogoutDate.AddHours((int)Session["TimeZoneOffset"]);
        int currentDay = shiftedLoginDate.Day;

        string open = first ? "open" : "";
        first = false;

        object param = new { day = login.LoginDate.ToShortDateString().Trim() };
        <div style="display:grid; grid-template-columns:auto 20px; align-items:start;">
            <details @open>
                <summary>  @shiftedLoginDate.ToShortDateString() </summary>

                @do
                {
                    if (login.User != null)
                    {
                        <div class="loginJournalLayout">
                            <div>@Helper.AvatarUser(login.User, "UserSmallAvatar")</div>
                            <div>@shiftedLoginDate.ToString("HH:mm")</div>

                            @if (shiftedLoginDate != shiftedLogoutDate)
                            {
                                <div>-</div>
                                <div>@shiftedLogoutDate.ToString("HH:mm")</div>
                            }
                            else
                            {
                                if (loggedUsersId.Contains(login.User.Id))
                                {
                                    loggedUsersId.Remove(login.User.Id);
                                    <div>-</div>
                                    <div title="Est en ligne en ce moment">@Helper.OnLineStatusIcon(true, false)</div>
                                }
                                else
                                {
                                    <div>-</div>
                                    <div>@Helper.TimeOutIcon()</div>
                                }
                            }

                            @if (true && login.IpAddress != "::1" && login.CountryCode != null)
                            {
                                <div>
                                    @Helper.CountryFlag(login.CountryCode.ToLower())
                                </div>
                                <div class="extraJournalInfo IP_Address">
                                    @login.IpAddress, @login.City, @login.RegionName
                                </div>
                            }
                            else
                            {
                                <div class="extraJournalInfo IP_Address">&nbsp;</div>
                            }

                        </div>
                    }
                    index++;
                    if (index < count)
                    {
                        login = logins[index];
                        shiftedLoginDate = login.LoginDate.AddHours((int)Session["TimeZoneOffset"]);
                        shiftedLogoutDate = login.LogoutDate.AddHours((int)Session["TimeZoneOffset"]);
                    }
                } while (index < count && currentDay == shiftedLoginDate.Day);
            </details>
            @Helper.IconConfirmCmdWithParam("Accounts", "DeleteJournalDay", param, " redIcon fa-times", "Effacer la journée du " + shiftedLoginDate.ToShortDateString())
        </div>
    }
}
